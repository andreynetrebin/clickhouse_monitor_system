from django.db import models
from django.contrib.auth.models import User


class SlowQuery(models.Model):
    STATUS_CHOICES = [
        ('new', 'üÜï –ù–æ–≤—ã–π'),
        ('in_analysis', 'üîç –í –∞–Ω–∞–ª–∏–∑–µ'),
        ('waiting_feedback', '‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ñ–∏–¥–±–µ–∫–∞'),
        ('optimized', '‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω'),
        ('ignored', '‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω'),
        ('cannot_optimize', 'üö´ –ù–µ –ø–æ–¥–ª–µ–∂–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'),
    ]

    PROBLEM_CATEGORIES = [
        ('full_scan', 'üìä –ü–æ–ª–Ω–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã'),
        ('missing_index', 'üìà –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–∞'),
        ('cross_join', '‚ùå CROSS JOIN'),
        ('subquery', 'üîÑ –ù–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–∑–∞–ø—Ä–æ—Å'),
        ('large_result', 'üíæ –ë–æ–ª—å—à–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'),
        ('memory_usage', 'üß† –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏'),
        ('network', 'üåê –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã'),
        ('configuration', '‚öôÔ∏è –ü—Ä–æ–±–ª–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'),
        ('other', '‚ùì –î—Ä—É–≥–æ–µ'),
    ]

    query_log = models.OneToOneField('monitor.QueryLog', on_delete=models.CASCADE, verbose_name="–õ–æ–≥ –∑–∞–ø—Ä–æ—Å–∞")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='new', db_index=True,
                              verbose_name="–°—Ç–∞—Ç—É—Å")

    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
    problem_category = models.CharField(max_length=20, choices=PROBLEM_CATEGORIES, blank=True,
                                        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
    analysis_notes = models.TextField(blank=True, verbose_name="–ó–∞–º–µ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    tags = models.CharField(max_length=500, blank=True, verbose_name="–¢–µ–≥–∏", help_text="–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    optimized_query = models.TextField(blank=True, verbose_name="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
    optimization_notes = models.TextField(blank=True, verbose_name="–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    expected_improvement = models.FloatField(null=True, blank=True, verbose_name="–û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ (%)")

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    actual_improvement = models.FloatField(null=True, blank=True, verbose_name="–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ (%)")
    before_duration_ms = models.FloatField(null=True, blank=True, verbose_name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ (–º—Å)")
    after_duration_ms = models.FloatField(null=True, blank=True, verbose_name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ (–º—Å)")

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    assigned_to = models.ForeignKey(User, null=True, blank=True, on_delete=models.SET_NULL, verbose_name="–ù–∞–∑–Ω–∞—á–µ–Ω")
    analysis_started_at = models.DateTimeField(null=True, blank=True, verbose_name="–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞")
    optimized_at = models.DateTimeField(null=True, blank=True, verbose_name="–í—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
        verbose_name_plural = "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
        ordering = ['-created_at']

    def __str__(self):
        return f"SlowQuery #{self.id} ({self.status})"

    def get_duration_seconds(self):
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return self.query_log.duration_ms / 1000 if self.query_log.duration_ms else 0

    def get_improvement_color(self):
        """–¶–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è"""
        if not self.actual_improvement:
            return 'gray'
        elif self.actual_improvement > 50:
            return 'green'
        elif self.actual_improvement > 20:
            return 'orange'
        else:
            return 'red'


class QueryAnalysisResult(models.Model):
    """
    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞
    """
    query_log = models.OneToOneField('monitor.QueryLog', on_delete=models.CASCADE, verbose_name="–õ–æ–≥ –∑–∞–ø—Ä–æ—Å–∞")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    complexity_score = models.IntegerField(default=0, verbose_name="–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
    has_full_scan = models.BooleanField(default=False, verbose_name="–ü–æ–ª–Ω–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    has_sorting = models.BooleanField(default=False, verbose_name="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    has_aggregation = models.BooleanField(default=False, verbose_name="–ê–≥—Ä–µ–≥–∞—Ü–∏—è")
    pipeline_complexity = models.IntegerField(default=0, verbose_name="–°–ª–æ–∂–Ω–æ—Å—Ç—å pipeline")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü (JSON –ø–æ–ª–µ)
    table_stats = models.JSONField(default=dict, verbose_name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (JSON –ø–æ–ª–µ)
    recommendations = models.JSONField(default=list, verbose_name="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    warnings = models.JSONField(default=list, verbose_name="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")

    # EXPLAIN –¥–∞–Ω–Ω—ã–µ (JSON –ø–æ–ª–µ)
    explain_plan = models.JSONField(default=list, verbose_name="EXPLAIN PLAN")
    explain_pipeline = models.JSONField(default=list, verbose_name="EXPLAIN PIPELINE")

    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    estimated_improvement = models.FloatField(null=True, blank=True, verbose_name="–û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ (%)")
    analysis_duration_ms = models.FloatField(default=0, verbose_name="–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ (–º—Å)")

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    analyzed_at = models.DateTimeField(auto_now_add=True, verbose_name="–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞")
    analysis_version = models.CharField(max_length=20, default='1.0', verbose_name="–í–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞")

    class Meta:
        verbose_name = "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞"
        verbose_name_plural = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"
        ordering = ['-analyzed_at']

    def __str__(self):
        return f"Analysis for Query #{self.query_log.id}"

    def get_recommendations_count(self):
        return len(self.recommendations)

    def get_warnings_count(self):
        return len(self.warnings)

    def get_critical_warnings(self):
        return [w for w in self.warnings if w.get('priority') == 'critical']

    def get_high_priority_warnings(self):
        return [w for w in self.warnings if w.get('priority') in ['critical', 'high']]


class TableAnalysis(models.Model):
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
    """
    table_name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
    database = models.CharField(max_length=100, default='default', verbose_name="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    total_rows = models.BigIntegerField(default=0, verbose_name="–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫")
    total_bytes = models.BigIntegerField(default=0, verbose_name="–†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö")
    engine = models.CharField(max_length=100, blank=True, verbose_name="–î–≤–∏–∂–æ–∫")
    partition_key = models.TextField(blank=True, verbose_name="–ö–ª—é—á –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    sorting_key = models.TextField(blank=True, verbose_name="–ö–ª—é—á —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")

    # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    query_count = models.IntegerField(default=0, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
    avg_duration_ms = models.FloatField(default=0, verbose_name="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    last_analyzed = models.DateTimeField(auto_now=True, verbose_name="–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    table_recommendations = models.JSONField(default=list, verbose_name="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã")

    class Meta:
        verbose_name = "–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã"
        verbose_name_plural = "–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü"
        unique_together = ['table_name', 'database']
        indexes = [
            models.Index(fields=['table_name', 'database']),
            models.Index(fields=['total_rows']),
        ]

    def __str__(self):
        return f"{self.database}.{self.table_name}"

    def get_size_gb(self):
        return self.total_bytes / (1024 ** 3) if self.total_bytes else 0

    def get_size_mb(self):
        return self.total_bytes / (1024 ** 2) if self.total_bytes else 0


class IndexRecommendation(models.Model):
    """
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏–Ω–¥–µ–∫—Å–æ–≤
    """
    ANALYSIS_SOURCE_CHOICES = [
        ('explain', 'EXPLAIN –∞–Ω–∞–ª–∏–∑'),
        ('query_log', 'Query Log —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        ('manual', '–†—É—á–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'),
    ]

    table_analysis = models.ForeignKey(TableAnalysis, on_delete=models.CASCADE, verbose_name="–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
    column_name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏")
    index_type = models.CharField(max_length=50, default='skip', verbose_name="–¢–∏–ø –∏–Ω–¥–µ–∫—Å–∞")
    recommendation_reason = models.TextField(verbose_name="–ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    expected_improvement = models.FloatField(null=True, blank=True, verbose_name="–û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ (%)")
    analysis_source = models.CharField(max_length=20, choices=ANALYSIS_SOURCE_CHOICES, default='explain')

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    query_count = models.IntegerField(default=0, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
    avg_filter_selectivity = models.FloatField(null=True, blank=True, verbose_name="–°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞")

    created_at = models.DateTimeField(auto_now_add=True)
    implemented = models.BooleanField(default=False, verbose_name="–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    implemented_at = models.DateTimeField(null=True, blank=True, verbose_name="–í—Ä–µ–º—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")

    class Meta:
        verbose_name = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞"
        verbose_name_plural = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤"
        ordering = ['-expected_improvement']

    def __str__(self):
        return f"Index on {self.table_analysis.table_name}.{self.column_name}"