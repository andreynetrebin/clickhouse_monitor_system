from typing import Dict, List, Optional
import re


class QueryOptimizationGuide:
    """
    –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ ClickHouse
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–±–ª–µ–º
    """

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    OPTIMIZATION_PATTERNS = {
        'full_scan': {
            'name': 'üìä –ü–æ–ª–Ω–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã',
            'patterns': [
                r'WHERE.*!=',
                r'WHERE.*NOT IN',
                r'WHERE.*LIKE.*%',
                r'WHERE.*IS NULL',
                r'WHERE.*OR.*=',
            ],
            'recommendations': [
                '–î–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –≤ —É—Å–ª–æ–≤–∏—è—Ö WHERE',
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü',
                '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å–ª–æ–≤–∏—è —Å = –≤–º–µ—Å—Ç–æ != –∏–ª–∏ NOT IN',
                '–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫'
            ],
            'priority': 'high'
        },

        'missing_index': {
            'name': 'üìà –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–∞',
            'patterns': [
                r'WHERE.*\w+.*=',
                r'WHERE.*\w+.*>',
                r'WHERE.*\w+.*<',
                r'JOIN.*ON.*=',
            ],
            'recommendations': [
                '–°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —É—Å–ª–æ–≤–∏—è—Ö WHERE',
                '–î–ª—è JOIN —Å–æ–∑–¥–∞–π—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å–≤—è–∑–µ–π',
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è multiple —É—Å–ª–æ–≤–∏–π',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö (high cardinality first)'
            ],
            'priority': 'high'
        },

        'cross_join': {
            'name': '‚ùå CROSS JOIN',
            'patterns': [
                r'CROSS JOIN',
                r'JOIN.*ON.*1=1',
                r',.*,',  # implicit cross join
            ],
            'recommendations': [
                '–ó–∞–º–µ–Ω–∏—Ç–µ CROSS JOIN –Ω–∞ INNER JOIN —Å —è–≤–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏',
                '–î–æ–±–∞–≤—å—Ç–µ —É—Å–ª–æ–≤–∏—è JOIN –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–µ–∫–∞—Ä—Ç–æ–≤–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è',
                '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ CROSS JOIN',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ JOIN –∏–º–µ—é—Ç —è–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è'
            ],
            'priority': 'critical'
        },

        'subquery': {
            'name': 'üîÑ –ù–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–∑–∞–ø—Ä–æ—Å',
            'patterns': [
                r'WHERE.*IN\s*\(SELECT',
                r'WHERE.*EXISTS\s*\(SELECT',
                r'SELECT.*\(\s*SELECT',
            ],
            'recommendations': [
                '–ó–∞–º–µ–Ω–∏—Ç–µ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ JOIN –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ',
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CTE (WITH) –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤',
                '–î–ª—è IN –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫'
            ],
            'priority': 'medium'
        },

        'large_result': {
            'name': 'üíæ –ë–æ–ª—å—à–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            'patterns': [
                r'SELECT\s*\*',
                r'LIMIT\s+100000',
                r'LIMIT\s+10000',
            ],
            'recommendations': [
                '–í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤–º–µ—Å—Ç–æ SELECT *',
                '–î–æ–±–∞–≤—å—Ç–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö',
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ LIMIT',
                '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –∞–≥—Ä–µ–≥–∞—Ü–∏–π'
            ],
            'priority': 'medium'
        },

        'memory_usage': {
            'name': 'üß† –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
            'patterns': [
                r'DISTINCT',
                r'GROUP BY.*\w+,\s*\w+,\s*\w+',  # –º–Ω–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ GROUP BY
                r'ORDER BY.*\w+,\s*\w+,\s*\w+',  # –º–Ω–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ ORDER BY
            ],
            'recommendations': [
                '–î–ª—è DISTINCT —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ (uniqCombined)',
                '–£–ø—Ä–æ—Å—Ç–∏—Ç–µ GROUP BY - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏',
                '–î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –±–æ–ª—å—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–¥–µ–∫—Å—ã',
                '–£–≤–µ–ª–∏—á—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (max_memory_usage)'
            ],
            'priority': 'medium'
        },

        'datetime_optimization': {
            'name': '‚è∞ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏',
            'patterns': [
                r'WHERE.*date.*>.*now\(\)',
                r'WHERE.*toDate\(',
                r'WHERE.*toString\(date\)',
            ],
            'recommendations': [
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤',
                '–î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Date/DateTime —Ç–∏–ø—ã',
                '–ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π —Ç–∏–ø–æ–≤ –≤ —É—Å–ª–æ–≤–∏—è—Ö WHERE',
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º'
            ],
            'priority': 'medium'
        }
    }

    @classmethod
    def analyze_query(cls, query: str) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        recommendations = []
        detected_patterns = []

        query_upper = query.upper()

        for pattern_key, pattern_info in cls.OPTIMIZATION_PATTERNS.items():
            for regex_pattern in pattern_info['patterns']:
                if re.search(regex_pattern, query_upper, re.IGNORECASE):
                    detected_patterns.append({
                        'pattern': pattern_key,
                        'name': pattern_info['name'],
                        'priority': pattern_info['priority'],
                        'recommendations': pattern_info['recommendations']
                    })
                    break  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        unique_recommendations = []
        seen_recommendations = set()

        for pattern in detected_patterns:
            for rec in pattern['recommendations']:
                if rec not in seen_recommendations:
                    unique_recommendations.append(rec)
                    seen_recommendations.add(rec)

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        critical_recs = [p for p in detected_patterns if p['priority'] == 'critical']
        high_recs = [p for p in detected_patterns if p['priority'] == 'high']
        medium_recs = [p for p in detected_patterns if p['priority'] == 'medium']

        return {
            'detected_patterns': detected_patterns,
            'recommendations': unique_recommendations,
            'summary': {
                'critical_count': len(critical_recs),
                'high_count': len(high_recs),
                'medium_count': len(medium_recs),
                'total_patterns': len(detected_patterns)
            }
        }

    @classmethod
    def generate_optimized_template(cls, original_query: str, patterns: List) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        """
        if not patterns:
            return original_query

        optimized = original_query

        # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
        for pattern in patterns:
            if pattern['pattern'] == 'full_scan':
                # –ó–∞–º–µ–Ω–∞ != –Ω–∞ = –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
                optimized = re.sub(r'WHERE\s+(\w+)\s*!=\s*(\S+)',
                                   r'WHERE \1 = \2', optimized, flags=re.IGNORECASE)

            elif pattern['pattern'] == 'large_result':
                # –ó–∞–º–µ–Ω–∞ SELECT * –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                if 'SELECT *' in optimized.upper():
                    optimized = re.sub(r'SELECT\s*\*',
                                       r'SELECT /* specify columns here */',
                                       optimized, flags=re.IGNORECASE)

            elif pattern['pattern'] == 'subquery':
                # –ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã IN –ø–æ–¥–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ JOIN
                if ' IN (SELECT' in optimized.upper():
                    optimized = re.sub(
                        r'WHERE\s+(\w+)\s+IN\s*\(\s*SELECT\s+(\w+)\s+FROM\s+(\w+)',
                        r'JOIN \3 ON \1 = \2 WHERE',
                        optimized, flags=re.IGNORECASE
                    )

        return optimized

    @classmethod
    def get_best_practices_checklist(cls) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–∫–ª–∏—Å—Ç –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ ClickHouse
        """
        return [
            {
                'category': 'üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞',
                'items': [
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ SELECT',
                    '–ò–∑–±–µ–≥–∞–π—Ç–µ SELECT * –≤ production –∑–∞–ø—Ä–æ—Å–∞—Ö',
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ LIMIT –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                    '–ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ CTE'
                ]
            },
            {
                'category': '‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                'items': [
                    '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –≤ —É—Å–ª–æ–≤–∏—è—Ö WHERE –∏ JOIN',
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü',
                    '–ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π —Ç–∏–ø–æ–≤ –≤ —É—Å–ª–æ–≤–∏—è—Ö WHERE',
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
                ]
            },
            {
                'category': 'üîç –£—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
                'items': [
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ = –≤–º–µ—Å—Ç–æ != –∏–ª–∏ NOT IN –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ',
                    '–î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã',
                    '–ò–∑–±–µ–≥–∞–π—Ç–µ OR —É—Å–ª–æ–≤–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ UNION ALL',
                    '–ü–æ–º–µ—â–∞–π—Ç–µ —Å–∞–º—ã–µ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–≤—ã–º–∏'
                ]
            },
            {
                'category': 'üîÑ JOIN –æ–ø–µ—Ä–∞—Ü–∏–∏',
                'items': [
                    '–í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —è–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è JOIN',
                    '–ò–∑–±–µ–≥–∞–π—Ç–µ CROSS JOIN –≤ production',
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ INNER JOIN –≤–º–µ—Å—Ç–æ –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤ –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ',
                    '–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ JOIN (–º–µ–Ω—å—à–∞—è —Ç–∞–±–ª–∏—Ü–∞ first)'
                ]
            }
        ]


# –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
optimization_guide = QueryOptimizationGuide()